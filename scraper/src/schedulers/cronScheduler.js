import cron from 'node-cron';
import dotenv from 'dotenv';
import logger from '../utils/logger.js';
import AllocineScraper from '../scrapers/allocineScraper.js';

dotenv.config();

class CronScheduler {
  constructor() {
    this.schedule = process.env.SCRAPE_CRON_SCHEDULE || '0 2 * * *'; // Par d√©faut : 2h du matin chaque jour
    this.isRunning = false;
    this.scraper = new AllocineScraper();
  }

  async runScraping() {
    if (this.isRunning) {
      logger.warn('‚ö†Ô∏è Un scraping est d√©j√† en cours, ignor√©');
      return;
    }

    try {
      this.isRunning = true;
      logger.info('üöÄ D√©but du scraping programm√© d\'Allocin√©');

      const result = await this.scraper.run();
      
      if (result.success) {
        logger.success(`‚úÖ Scraping programm√© termin√© avec succ√®s: ${result.totalMovies} films`);
      } else {
        logger.error('‚ùå Erreur lors du scraping programm√©', result.error);
      }
    } catch (error) {
      logger.error('üí• Erreur fatale lors du scraping programm√©', error);
    } finally {
      this.isRunning = false;
    }
  }

  start() {
    logger.info(`‚è∞ Programmation du scraper: ${this.schedule}`);
    
    // Valider le format cron
    if (!cron.validate(this.schedule)) {
      throw new Error(`Format cron invalide: ${this.schedule}`);
    }

    // Programmer la t√¢che
    cron.schedule(this.schedule, async () => {
      await this.runScraping();
    }, {
      scheduled: true,
      timezone: "Europe/Paris"
    });

    logger.success('‚úÖ Scheduler d√©marr√© avec succ√®s');
  }

  // M√©thode pour lancer un scraping manuel
  async runManual() {
    logger.info('üîß Lancement manuel du scraping');
    await this.runScraping();
  }

  // Informations sur le prochain scraping
  getNextRun() {
    // Cette m√©thode n√©cessiterait une librairie suppl√©mentaire pour calculer la prochaine ex√©cution
    // Pour l'instant, on retourne juste le schedule
    return this.schedule;
  }
}

export default CronScheduler;