import dotenv from 'dotenv';
import logger from './src/utils/logger.js';
import CronScheduler from './src/schedulers/cronScheduler.js';
import AllocineScraper from './src/scrapers/allocineScraper.js';
import AllocineSimpleScraper from './src/scrapers/allocineSimpleScraper.js';

// Configuration des variables d'environnement
dotenv.config();

class ScraperApp {
  constructor() {
    this.scheduler = new CronScheduler();
  }

  async start() {
    try {
      logger.info('üöÄ D√©marrage du service de scraping Allocin√©');
      
      // Obtenir les arguments de la ligne de commande
      const args = process.argv.slice(2);
      const command = args[0];

      switch (command) {
        case 'run':
          // Lancement manuel du scraper
          await this.runManual();
          break;
        case 'schedule':
          // D√©marrage du scheduler
          await this.startScheduler();
          break;
        case 'test':
          // Test du scraper sur une seule semaine
          await this.testScraper();
          break;
        default:
          this.showHelp();
          break;
      }
    } catch (error) {
      logger.error('üí• Erreur fatale de l\'application', error);
      process.exit(1);
    }
  }

  async runManual() {
    logger.info('üîß Lancement manuel du scraping');
    const scraper = new AllocineSimpleScraper(); // Utilise le scraper simple par d√©faut
    const result = await scraper.run();
    
    if (result.success) {
      logger.success(`‚úÖ Scraping termin√©: ${result.totalMovies} films scrap√©s`);
    } else {
      logger.error('‚ùå Erreur lors du scraping', result.error);
    }
    
    process.exit(result.success ? 0 : 1);
  }

  async startScheduler() {
    logger.info('‚è∞ D√©marrage du scheduler');
    this.scheduler.start();
    
    // Maintenir le processus actif
    process.on('SIGINT', () => {
      logger.info('üõë Arr√™t du scheduler demand√©');
      process.exit(0);
    });

    process.on('SIGTERM', () => {
      logger.info('üõë Arr√™t du scheduler demand√©');
      process.exit(0);
    });

    logger.info('üîÑ Scheduler en cours d\'ex√©cution. Utilisez Ctrl+C pour arr√™ter.');
  }

  async testScraper() {
    const maxWeeks = process.env.MAX_WEEKS || '3';
    logger.info(`üß™ Test du scraper (${maxWeeks} semaine${maxWeeks > 1 ? 's' : ''} seulement)`);
    
    const scraper = new AllocineSimpleScraper(); // Utilise le scraper simple
    const result = await scraper.run();
    
    if (result.success) {
      logger.success(`‚úÖ Test termin√©: ${result.totalMovies} films trouv√©s`);
      console.log('\nüìã Aper√ßu des films trouv√©s:');
      result.movies.slice(0, 5).forEach((movie, index) => {
        console.log(`${index + 1}. ${movie.title} (${movie.releaseDate || 'Date inconnue'})`);
      });
    } else {
      logger.error('‚ùå Test √©chou√©', result.error);
    }
    
    process.exit(result.success ? 0 : 1);
  }

  showHelp() {
    console.log(`
üé¨ Scraper Allocin√© - Service de r√©cup√©ration des prochaines sorties cin√©ma

Usage:
  node index.js <command>

Commandes disponibles:
  run       - Lance un scraping manuel imm√©diatement
  schedule  - D√©marre le scheduler pour les scraping automatiques
  test      - Test le scraper sur une seule semaine
  help      - Affiche cette aide

Variables d'environnement (.env):
  MONGODB_URI              - URI de connexion MongoDB
  MONGODB_DB_NAME          - Nom de la base de donn√©es
  SCRAPE_CRON_SCHEDULE     - Planning cron (d√©faut: 0 2 * * * = 2h du matin)
  MAX_WEEKS                - Nombre de semaines √† scraper (d√©faut: 12)
  HEADLESS_MODE            - Mode headless du browser (d√©faut: true)

Exemples:
  node index.js run        - Scraping imm√©diat
  node index.js schedule   - D√©marrage du scheduler
  node index.js test       - Test rapide
    `);
  }
}

// D√©marrage de l'application
const app = new ScraperApp();
app.start();